// Benchmarks for project 2
// To run the benchmarks copy the following main function
// into the follwing main function into the main.cpp file

// The benchmarks are presented in the report.


// -------------------------------------------------------------------------------
// Benchmark 1... checking that the algorithm corrects the right eigenvectors

int main()
{

        mat BenchMrk = mat(3,3,fill::zeros);
        BenchMrk.diag().fill(1);
        BenchMrk(0,1) = 2;
        BenchMrk(1,0) = 2;

        cout << BenchMrk << endl;
        mat R = mat(3,3,fill::zeros);
        R.diag().fill(1);

        int counter = 0;
        vec max;
        while (testing(BenchMrk) == 0)
        {
            counter++;
            max = max_element(BenchMrk);
            rotate(BenchMrk,R,max(1),max(2));

        }

        vec eig_vals = BenchMrk.diag();
        eig_vals = sort(eig_vals);

        cout << "first eigenvalue: " << eig_vals(0) << endl;
        cout << "second eigenvalue: " << eig_vals(1) << endl;
        cout << "third eigenvalue: " << eig_vals(2) << endl;
        cout << "number of similarity transformations: " << counter << endl;

    return 0;
}

// Terminal output


   1.0000   2.0000        0
   2.0000   1.0000        0
        0        0   1.0000

first eigenvalue: -1
second eigenvalue: 1
third eigenvalue: 3
number of similarity transformations: 1

// Benchmark 2
// Checking that we find the max off-diagonal element

int main()
{

    mat A = mat(5,5,fill::ones);
    A.diag(-1).fill(3);
    A.diag(1).fill(4);
    A(3,4) = 5;
    A(2,3) = 6;
    // The largest off-diagonal element is 6

    cout << A << endl;
    vec amax = max_element(A);
    cout << "The largest off-diagonal element is: " << amax(0) << endl;

    return 0;
}

// Terminal output

   1.0000   4.0000   1.0000   1.0000   1.0000
   3.0000   1.0000   4.0000   1.0000   1.0000
   1.0000   3.0000   1.0000   6.0000   1.0000
   1.0000   1.0000   3.0000   1.0000   5.0000
   1.0000   1.0000   1.0000   3.0000   1.0000

The largest off-diagonal element is: 6



// ------------------------------------------------------------------------------------
// Benchmark 3
// Jacobi's rotation algorithm

int main()
{

    // Initialize parameters
    double rho_min = 0;
    double rho_max = 5;
    int N = 100;

    // Initialize constants
    double h = rho_max/ (N+1);
    double diag_const = 2.0/(h*h);
    double nondiag_const = -1.0/(h*h);

    // Calculate array of potential values

    vec v(N);
    vec rho(N);
    rho(0) = rho_min;
    v(0) = rho(0)*rho(0);
    for (int i = 0; i<N; i++)
    {
        rho(i) = rho_min + (i+1)*h;
        v(i) = rho(i)*rho(i);
    }


    // Creating the threedimensional matrix
    mat A = mat(N,N,fill::zeros);
    A.diag(1).fill(nondiag_const);
    A.diag(-1).fill(nondiag_const);
    A.diag().fill(diag_const);


    for (int i = 0; i < N; i++)
    {
        A(i,i) = A(i,i) + v(i);
    }

    // eigenvector
    mat R = mat(N,N,fill::zeros);
    R.diag().fill(1);

    int counter = 0;

    vec max;
    while (testing(A) == 0)
    {
        counter++;
        max = max_element(A);
        rotate(A,R,max(1),max(2));

    }

    vec eig_vals = A.diag();
    uvec indices = sort_index(eig_vals);
    eig_vals = sort(eig_vals);


    cout << "Lambda 1 is: " << eig_vals(0) << endl;
    cout << "Lambda 2 is: " << eig_vals(1) << endl;
    cout << "Lambda 3 is: " << eig_vals(2) << endl;
    cout << "number of similarity transformations needed: " << counter << endl;

    return 0;
}

// Terminal output

Lambda 1 is: 2.99923
Lambda 2 is: 6.99617
Lambda 3 is: 10.9908
number of similarity transformations needed: 19505


// -------------------------------------------------------------------------------------
// Benchmark 4
// Ground state energies for four values of omega
// with Coulomb interaction between the two electrons



int main()
{
    //schrodinger();
    //eigsym();

    // Initialize parameters
    double rho_min = 0;
    double rho_max = 10;
    int N = 100;

    // Initialize constants
    double h = rho_max/ (N+1);
    double diag_const = 2.0/(h*h);
    double nondiag_const = -1.0/(h*h);
    vec omegas = {0.01, 0.5, 1.0, 5.0};

    // Calculate array of potential values

    for (int j = 0; j<4; j++){


        vec v(N);
        vec rho(N);
        rho(0) = rho_min;
        v(0) = omegas(j)*omegas(j)*rho(0)*rho(0) + 1/rho(0);
        for (int i = 0; i<N; i++)
        {
            rho(i) = rho_min + (i+1)*h;
            v(i) = omegas(j)*omegas(j)*rho(i)*rho(i) + 1/rho(i);
        }


        // Creating the threedimensional matrix
        mat A = mat(N,N,fill::zeros);
        A.diag(1).fill(nondiag_const);
        A.diag(-1).fill(nondiag_const);
        A.diag().fill(diag_const);


        for (int i = 0; i < N; i++)
        {
            A(i,i) = A(i,i) + v(i);
        }

        // eigenvector
        mat R = mat(N,N,fill::zeros);
        R.diag().fill(1);

        int counter = 0;



        vec max;
        while (testing(A) == 0)
        {
            counter++;
            max = max_element(A);
            rotate(A,R,max(1),max(2));

        }

        vec eig_vals = A.diag();
        uvec indices = sort_index(eig_vals);
        eig_vals = sort(eig_vals);


        cout << "For omega: " << omegas(j) << " lambda 1 is: " << eig_vals(0) << endl;
    }

    return 0;
}


// Terminal output

For omega: 0.01 lambda 1 is: 0.31162
For omega: 0.5 lambda 1 is: 2.22933
For omega: 1 lambda 1 is: 4.05466
For omega: 5 lambda 1 is: 17.368





